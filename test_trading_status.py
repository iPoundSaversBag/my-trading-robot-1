#!/usr/bin/env python3
"""
Comprehensive test to verify bot configuration and trade execution
"""
import requests
import os
from dotenv import load_dotenv
import json

def test_bot_trading_status():
    load_dotenv()
    vercel_url = "https://my-trading-robot-1.vercel.app"
    bot_secret = os.environ.get('BOT_SECRET')

    print(f'üîç COMPREHENSIVE BOT TRADING ANALYSIS')
    print(f'=' * 50)

    # Test the live bot API
    headers = {'Authorization': f'Bearer {bot_secret}'}
    
    try:
        response = requests.get(f'{vercel_url}/api/live-bot', headers=headers, timeout=15)
        if response.status_code == 200:
            data = response.json()
            
            print(f'üìä CURRENT BOT STATUS:')
            print(f'-' * 30)
            print(f'‚úÖ API Response: SUCCESS')
            print(f'‚úÖ Signal: {data.get("signal", {}).get("signal", "N/A")}')
            print(f'‚úÖ Confidence: {data.get("signal", {}).get("confidence", "N/A")}')
            print(f'‚úÖ Market Regime: {data.get("market_regime", {}).get("primary", "N/A")}')
            
            # Check trade execution details
            trade_executed = data.get("trade_executed", {})
            print(f'\nüîÑ TRADE EXECUTION ANALYSIS:')
            print(f'-' * 30)
            
            if trade_executed:
                is_simulated = trade_executed.get("simulated", False)
                if is_simulated:
                    print(f'‚ö†Ô∏è TRADE MODE: SIMULATED (Safe Testing)')
                    print(f'   Symbol: {trade_executed.get("symbol", "N/A")}')
                    print(f'   Side: {trade_executed.get("side", "N/A")}')
                    print(f'   Quantity: {trade_executed.get("quantity", "N/A")}')
                    print(f'   Price: ${trade_executed.get("price", "N/A")}')
                    print(f'   Value: ${trade_executed.get("value", "N/A"):.2f}' if trade_executed.get("value") else 'N/A')
                    print(f'   üìù NOTE: No real trades placed - simulation mode active')
                else:
                    print(f'üö® TRADE MODE: LIVE TRADING ACTIVE!')
                    print(f'   Order ID: {trade_executed.get("orderId", "N/A")}')
                    print(f'   Status: {trade_executed.get("status", "N/A")}')
                    print(f'   Fill Qty: {trade_executed.get("executedQty", "N/A")}')
            else:
                print(f'‚ùå No trade execution data found')
            
            # Check API endpoint being used
            print(f'\nüåê API CONFIGURATION:')
            print(f'-' * 30)
            config_source = data.get("config_source", "unknown")
            print(f'‚úÖ Config Source: {config_source}')
            
            # Check parameters
            parameters = data.get("parameters_used", {})
            print(f'‚úÖ RSI Period: {parameters.get("RSI_PERIOD", "N/A")}')
            print(f'‚úÖ MA Fast/Slow: {parameters.get("MA_FAST", "N/A")}/{parameters.get("MA_SLOW", "N/A")}')
            
            # Check account balance (indicates if connected to real or test account)
            account_balance = data.get("account_balance", {})
            print(f'\nüí∞ ACCOUNT STATUS:')
            print(f'-' * 30)
            if account_balance:
                # Look for testnet indicators
                if any('test' in str(v).lower() for v in account_balance.values()):
                    print(f'‚úÖ TESTNET account detected')
                else:
                    print(f'‚ö†Ô∏è Account type unclear from balance data')
                print(f'   Balance data available: {len(account_balance)} assets')
            else:
                print(f'‚ùå No account balance data (API might be using simulated data)')
            
            return data
            
        else:
            print(f'‚ùå API Request failed: {response.status_code}')
            print(f'   Response: {response.text[:200]}...')
            return None
            
    except Exception as e:
        print(f'‚ùå Error: {e}')
        return None

def check_api_endpoint_config():
    print(f'\nüîß API ENDPOINT VERIFICATION:')
    print(f'-' * 30)
    
    # Load environment to check API keys
    load_dotenv()
    api_key = os.environ.get('BINANCE_API_KEY', '')
    
    print(f'‚úÖ API Key configured: {api_key[:10] if api_key else "Not set"}...')
    
    # Note about endpoint configuration
    print(f'üìù CURRENT ENDPOINT CONFIG (from code):')
    print(f'   Production: https://api.binance.com')
    print(f'   Testnet: https://testnet.binance.vision')
    print(f'   üìç Your bot is configured for: PRODUCTION endpoint')
    print(f'   üîç But with TESTNET API keys (safe for testing)')

if __name__ == "__main__":
    bot_data = test_bot_trading_status()
    check_api_endpoint_config()
    
    print(f'\nüéØ SUMMARY:')
    print(f'=' * 50)
    if bot_data:
        trade_data = bot_data.get("trade_executed")
        if trade_data and trade_data.get("simulated"):
            print(f'‚úÖ Bot is generating SIMULATED trades (safe)')
            print(f'‚úÖ Real market analysis with no trading risk')
            print(f'‚úÖ Perfect setup for testing and validation')
        elif trade_data:
            print(f'üö® Bot appears to be in LIVE trading mode')
            print(f'‚ö†Ô∏è Real trades may be executed!')
        else:
            print(f'‚ö†Ô∏è No trade execution detected - bot generating signals only')
            print(f'‚úÖ This is safe - analysis mode without trading')
    else:
        print(f'‚ùå Could not determine bot trading status')
        
    print(f'\nüìã NEXT STEPS:')
    print(f'   1. Verify API keys are from Binance testnet')
    print(f'   2. Check if endpoint should be testnet.binance.vision')
    print(f'   3. Confirm simulation mode is intentional')
