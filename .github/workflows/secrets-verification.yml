name: secrets-verification
on:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: secrets-verification
  cancel-in-progress: true

jobs:
  ping:
    runs-on: ubuntu-latest
    steps:
      - run: echo workflow syntax baseline OK
  verify:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Secret presence report
        shell: bash
        env:
          BOT_SECRET: ${{ secrets.BOT_SECRET }}
          VERCEL_URL: ${{ secrets.VERCEL_URL }}
          BINANCE_API_KEY: ${{ secrets.BINANCE_API_KEY }}
          BINANCE_API_SECRET: ${{ secrets.BINANCE_API_SECRET }}
        run: |
          set -euo pipefail
          echo 'Checking required secrets (lengths only):'
          for v in BOT_SECRET VERCEL_URL BINANCE_API_KEY BINANCE_API_SECRET; do
            val="${!v:-}"
            if [ -n "$val" ]; then echo "[OK] $v len=${#val}"; else echo "[MISSING] $v"; missing=1; fi
          done
          if [ "${missing:-0}" = 1 ]; then echo 'One or more required secrets missing' >&2; exit 1; fi
      - name: Live bot endpoint (optional)
        shell: bash
        env:
          VERCEL_URL: ${{ secrets.VERCEL_URL }}
          BOT_SECRET: ${{ secrets.BOT_SECRET }}
        run: |
          if [ -z "${VERCEL_URL}" ] || [ -z "${BOT_SECRET}" ]; then
            echo 'Skipping live-bot call (missing VERCEL_URL or BOT_SECRET)'; exit 0; fi
          echo 'Calling live-bot endpoint...'
          code=$(curl -s -o /dev/null -w '%{http_code}' -H "x-bot-secret: ${BOT_SECRET}" "${VERCEL_URL%/}/api/live-bot") || true
          echo "HTTP status: $code"
          # Accept 200 (success) or 401 (protected) without failing
          if [ "$code" != 200 ] && [ "$code" != 401 ]; then
            echo "Unexpected status $code" >&2; exit 1; fi
