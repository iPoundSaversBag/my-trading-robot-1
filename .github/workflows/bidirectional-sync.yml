name: Bidirectional Trading Sync
on:
  repository_dispatch:
    types: [trigger-backtest, sync-live-results, update-parameters]
  workflow_dispatch:
    inputs:
      action_type:
        description: 'Action to perform'
        required: true
        default: 'trigger-backtest'
        type: choice
        options:
        - trigger-backtest
        - sync-live-results
        - update-parameters
      source:
        description: 'Data source'
        required: false
        default: 'live-bot'
      parameters:
        description: 'Additional parameters (JSON)'
        required: false
        default: '{}'

jobs:
  bidirectional-sync:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install pandas numpy requests python-dotenv

    - name: Determine action type
      id: action
      run: |
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "action_type=${{ github.event.action }}" >> $GITHUB_OUTPUT
          echo "source=${{ github.event.client_payload.source }}" >> $GITHUB_OUTPUT
          echo "parameters=${{ github.event.client_payload.parameters }}" >> $GITHUB_OUTPUT
        else
          echo "action_type=${{ github.event.inputs.action_type }}" >> $GITHUB_OUTPUT
          echo "source=${{ github.event.inputs.source }}" >> $GITHUB_OUTPUT
          echo "parameters=${{ github.event.inputs.parameters }}" >> $GITHUB_OUTPUT
        fi

    - name: Trigger Remote Backtest Optimization
      if: steps.action.outputs.action_type == 'trigger-backtest'
      run: |
        echo "LAUNCH Triggering remote backtest optimization..."
        python3 << 'EOF'
        import json
        import os
        import sys
        from datetime import datetime
        
        # Simulate backtest optimization trigger
        print("ANALYTICS Starting remote backtest optimization...")
        
        # Create optimization request log
        request_data = {
            "timestamp": datetime.now().isoformat(),
            "source": "${{ steps.action.outputs.source }}",
            "action": "trigger-backtest",
            "status": "initiated",
            "parameters": json.loads('${{ steps.action.outputs.parameters }}')
        }
        
        # Save request to logs
        os.makedirs('logs', exist_ok=True)
        with open('logs/remote_backtest_requests.jsonl', 'a') as f:
            f.write(json.dumps(request_data) + '\n')
        
        print("SUCCESS Backtest optimization request logged")
        print(f"Request ID: {request_data['timestamp']}")
        EOF

    - name: Sync Live Trading Results to Local
      if: steps.action.outputs.action_type == 'sync-live-results'
      run: |
        echo "DOWNLOAD Syncing live trading results to local..."
        python3 << 'EOF'
        import json
        import requests
        from datetime import datetime
        
        # Get live bot results from Vercel
        try:
            vercel_url = "https://my-trading-robot-1-f22n1sboq-aidan-lanes-projects.vercel.app"
            bot_secret = "93699b3917045092715b8e16c01f2e1d"
            
            if not vercel_url:
                print("WARNING Vercel URL not configured - skipping sync")
                exit(0)
            
            if not bot_secret:
                print("WARNING Bot secret not configured - skipping sync")
                exit(0)
                
            if vercel_url:
                response = requests.get(f"{vercel_url}/api/live-bot", 
                                      headers={"Authorization": f"Bearer {bot_secret}"}, 
                                      timeout=30)
                
                if response.status_code == 200:
                    live_data = response.json()
                    
                    # Save live results locally
                    os.makedirs('live_trading', exist_ok=True)
                    
                    result_entry = {
                        "timestamp": datetime.now().isoformat(),
                        "live_bot_data": live_data,
                        "sync_source": "github_actions",
                        "action": "sync-live-results"
                    }
                    
                    # Append to live results log
                    with open('live_trading/remote_sync_results.jsonl', 'a') as f:
                        f.write(json.dumps(result_entry) + '\n')
                    
                    # Update live bot state
                    with open('live_trading/live_bot_state.json', 'w') as f:
                        json.dump(live_data, f, indent=2)
                    
                    print("SUCCESS Live trading results synced successfully")
                    print(f"Signal: {live_data.get('signal', {}).get('signal', 'N/A')}")
                    print(f"Regime: {live_data.get('market_regime', {}).get('primary', 'N/A')}")
                    print(f"Confidence: {live_data.get('signal', {}).get('confidence', 'N/A')}")
                else:
                    print(f"ERROR Failed to get live bot data: {response.status_code}")
            else:
                print("WARNING Vercel URL not configured")
        except Exception as e:
            print(f"ERROR Error syncing live results: {e}")
        EOF

    - name: Update Remote Parameters
      if: steps.action.outputs.action_type == 'update-parameters'
      run: |
        echo "SYNC Updating remote parameters..."
        python3 << 'EOF'
        import json
        import requests
        import os
        from datetime import datetime
        
        # Check if we have latest optimization results
        if os.path.exists('plots_output/latest_run_dir.txt'):
            with open('plots_output/latest_run_dir.txt', 'r') as f:
                latest_dir = f.read().strip()
            
            params_file = f"{latest_dir}/optimized_params_per_window.json"
            if os.path.exists(params_file):
                with open(params_file, 'r') as f:
                    all_params = json.load(f)
                
                # Get latest window parameters
                latest_window = max(all_params.keys(), key=lambda x: int(x.split('_')[1]))
                latest_params = all_params[latest_window]
                
                # Create live trading config
                live_config = {
                    "SYMBOL": "BTCUSDT",
                    "TIMEFRAME": "5m",
                    "RSI_PERIOD": latest_params.get("RSI_PERIOD", 14),
                    "RSI_OVERBOUGHT": latest_params.get("RSI_OVERBOUGHT", 70),
                    "RSI_OVERSOLD": latest_params.get("RSI_OVERSOLD", 30),
                    "MA_FAST": latest_params.get("TENKAN_SEN_PERIOD", 12),
                    "MA_SLOW": latest_params.get("KIJUN_SEN_PERIOD", 26),
                    "ADX_PERIOD": latest_params.get("ADX_PERIOD", 14),
                    "ATR_PERIOD": latest_params.get("ATR_PERIOD", 14),
                    "STOP_LOSS_MULTIPLIER": latest_params.get("STOP_LOSS_MULTIPLIER", 2.0),
                    "TAKE_PROFIT_MULTIPLIER": latest_params.get("TAKE_PROFIT_MULTIPLIER", 3.0),
                    "volatility_threshold": latest_params.get("volatility_threshold", 0.03),
                    "volume_threshold_multiplier": latest_params.get("volume_threshold_multiplier", 2.0),
                    "min_confidence_for_trade": latest_params.get("min_confidence", 0.04),
                    "source_window": latest_window,
                    "optimization_timestamp": latest_dir.split('/')[-1],
                    "last_updated": datetime.now().isoformat(),
                    "sync_source": "github_actions_bidirectional"
                }
                
                # Add regime-specific filters
                for key, value in latest_params.items():
                    if key.startswith('USE_') and '_FILTER_' in key:
                        live_config[key] = value
                
                # Update live trading config
                os.makedirs('api', exist_ok=True)
                with open('api/live_trading_config.json', 'w') as f:
                    json.dump(live_config, f, indent=2)
                
                print("SUCCESS Parameters updated successfully")
                print(f"Updated {len(live_config)} parameters")
                print(f"Source window: {latest_window}")
                print(f"RSI Period: {live_config['RSI_PERIOD']}")
                print(f"MA Fast/Slow: {live_config['MA_FAST']}/{live_config['MA_SLOW']}")
            else:
                print("ERROR No optimization parameters found")
        else:
            print("ERROR No latest run directory found")
        EOF

    - name: Commit and Push Changes
      if: steps.action.outputs.action_type == 'update-parameters' || steps.action.outputs.action_type == 'sync-live-results'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bidirectional Sync"
        
        # Add any changed files
        git add -A
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "SYNC Bidirectional sync: ${{ steps.action.outputs.action_type }} from ${{ steps.action.outputs.source }}"
          git push
          echo "SUCCESS Changes committed and pushed"
        fi

    - name: Notify Live Bot of Update
      if: steps.action.outputs.action_type == 'update-parameters'
      run: |
        echo "NOTIFY Notifying live bot of parameter update..."
        python3 << 'EOF'
        import requests
        import json
        
        try:
            vercel_url = "https://my-trading-robot-1-f22n1sboq-aidan-lanes-projects.vercel.app"
            bot_secret = "93699b3917045092715b8e16c01f2e1d"
            
            if not vercel_url:
                print("WARNING Vercel URL not configured - skipping notification")
                exit(0)
            
            if not bot_secret:
                print("WARNING Bot secret not configured - skipping notification")
                exit(0)
                
            if vercel_url:
                # Trigger live bot to reload config
                response = requests.get(f"{vercel_url}/api/backtest-sync/update",
                                      headers={"Authorization": f"Bearer {bot_secret}"},
                                      timeout=30)
                
                if response.status_code == 200:
                    result = response.json()
                    print("SUCCESS Live bot notified successfully")
                    print(f"Status: {result.get('status', 'unknown')}")
                else:
                    print(f"WARNING Live bot notification failed: {response.status_code}")
            else:
                print("WARNING Vercel URL not configured for notification")
        except Exception as e:
            print(f"ERROR Error notifying live bot: {e}")
        EOF

    - name: Summary Report
      run: |
        echo "ANALYTICS BIDIRECTIONAL SYNC SUMMARY"
        echo "===================================="
        echo "Action: ${{ steps.action.outputs.action_type }}"
        echo "Source: ${{ steps.action.outputs.source }}"
        echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        echo "Parameters: ${{ steps.action.outputs.parameters }}"
        echo "===================================="
